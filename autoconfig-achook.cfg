// # don't remove this comment! (the first line is ignored by Mozilla)

const MAIL_ACCOUNT_TEMPLATE = {
  name: 'Example',
  userName: '%S', // ユーザー名：「%S」は入力値のプレースホルダー
  rememberPassword: true,
  overrideAccountCreationWizard: false,

  // https://searchfox.org/comm-central/source/mailnews/base/public/nsIMsgIncomingServer.idl
  incomingServer: {
    prettyName: 'example - %S', // 表示名：「%S」は入力値のプレースホルダー
    type: 'pop3', // サーバーの種類：'pop3' or 'imap'
    hostname: 'pop.example.com', // サーバー名
    port: 110, // ポート
    socketType: 0, // 接続の保護：0=なし, 2=STARTTLS, 3=SSL/TLS
    authMethod: 3, // 認証方式：1=認証なし, 2=パスワード認証（安全でない古い方式）, 3=平文のパスワード認証（安全でない）, 4=暗号化されたパスワード認証, 5=Kerberos/GSSAPI, 6=NTLM, 7=TLS証明書, 9=任意の方式（安全でない）, 10=OAuth2
    'bool:login_at_startup' /*loginAtStartUp*/: true, // 新着メッセージがないか起動時に確認する
    doBiff: true, // 新着メッセージがないか*分ごとに確認する
    biffMinutes: 10, // 新着メッセージがないか*分ごとに確認する：時間間隔（単位：分）

    // POP3用設定
    // https://searchfox.org/comm-central/source/mailnews/local/public/nsIPop3IncomingServer.idl
    'bool:download_on_biff' /*downloadOnBiff*/: true, // 新着メッセージを自動的にダウンロードする
    'bool:headers_only' /*headersOnly*/: false, // ヘッダーのみ取得する
    'bool:leave_on_server': true, // ダウンロード後もサーバーにメッセージを残す
    'bool:delete_by_age_from_server' /*deleteByAgeFromServer*/: false, // ダウンロードしてから*日以上経過したメッセージは削除する
    'int:num_days_to_leave_on_server' /*numDaysToLeaveOnServer*/: 7, // ダウンロードしてから*日以上経過したメッセージは削除する：日数（単位：日）
    'bool:delete_mail_left_on_server' /*deleteMailLeftOnServer*/: false, // ダウンロードしたメッセージを削除したらサーバーからも削除する

    emptyTrashOnExit: false, // 終了時にごみ箱を空にする

    // 迷惑メール
    'int:spamLevel': 0, // このアカウントで迷惑メールの学習を有効にする：0=off, 100=on

    // ディスク領域
    'int:retainBy': 1, // このコンピューターとリモートサーバー上の古いメッセージを完全に削除してディスク領域を開放できます。：1=メッセージを自動削除しない, 2=送信日時から次の日数以上経過したメッセージを削除する, 3=最近のメッセージを次の数だけ残して削除する
    'bool:applyToFlaggedMessages': false, // スター付きのメッセージは残す：true=off, false=on
  },
  // https://searchfox.org/comm-central/source/mailnews/base/public/nsIMsgIdentity.idl
  identity: {
    fullName: '%S', // アカウント名：「%S」は入力値のプレースホルダー
    email: '%S@example.com', // E-mailアドレス：「%S」は入力値のプレースホルダー

    // 編集とアドレス入力
    composeHtml: false, // HTML形式でメッセージを編集する
    replyOnTop: 1, // 引用時の返答位置：0=引用部の下, 1=引用部の上, 2=引用部を選択
    sigOnForward: true,
    doFcc: true,
  },
  // https://searchfox.org/comm-central/source/mailnews/compose/public/nsISmtpServer.idl
  outgoingServer: {
    hostname: 'smtp.example.com',
    port: 25,
    socketType: 0, // 接続の保護：0=なし, 2=STARTTLS, 3=SSL/TLS
    authMethod: 1, // 認証方式：1=認証なし, 2=パスワード認証（安全でない古い方式）, 3=平文のパスワード認証（安全でない）, 4=暗号化されたパスワード認証, 5=Kerberos/GSSAPI, 6=NTLM, 7=TLS証明書, 9=任意の方式（安全でない）, 10=OAuth2
    description: '説明文',
  },
};


{ // AutoConfiguration Hook for Thunderbird 78
  const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
  const { Services } = Cu.import('resource://gre/modules/Services.jsm', {});
  const { MailServices } = Cu.import('resource:///modules/MailServices.jsm', {});

  function tryCreateAccount(parent) {
    if (!parent)
      parent = Services.wm.getMostRecentWindow('mail:3pane') || Services.wm.getMostRecentWindow('mail:messageWindow');
    const userNameResult = { value: '' };
    const passwordResult = { value: '' };
    let succeeded;
    const title = `${MAIL_ACCOUNT_TEMPLATE.name ? MAIL_ACCOUNT_TEMPLATE.name+' ' : ''}メールアカウントの新規作成`;
    if (MAIL_ACCOUNT_TEMPLATE.rememberPassword) {
      succeeded = Services.prompt.promptUsernameAndPassword(
        parent,
        title,
        '作成するメールアカウントのユーザー名とパスワードを入力してください',
        userNameResult,
        passwordResult,
        null,
        {}
      );
    }
    else {
      succeeded = Services.prompt.prompt(
        parent,
        title,
        '作成するメールアカウントのユーザー名を入力してください',
        userNameResult,
        null,
        {}
      );
    }
    const userName = String(userNameResult.value || '').trim();
    const password = String(passwordResult.value || '').trim();
    if (!succeeded || !userName)
      return;
    createAccount(userName, password);
  }

  // https://searchfox.org/comm-central/source/mail/components/accountcreation/content/emailWizard.js
  // https://searchfox.org/comm-central/source/mail/components/accountcreation/content/createInBackend.js#21
  function createAccount(userName, password) {
    const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
    const { Services } = Cu.import('resource://gre/modules/Services.jsm', {});
    const { MailServices } = Cu.import('resource:///modules/MailServices.jsm', {});
    const fullUserName = MAIL_ACCOUNT_TEMPLATE.userName ? MAIL_ACCOUNT_TEMPLATE.userName.replace(/%S/gi, userName) : userName;
    if (MailServices.accounts.accounts.some(account => account.incomingServer.username == fullUserName)) {
      Services.console.logStringMessage('account already exists: '+fullUserName);
      return;
    }

    const rememberPassword = (server, password) => {
      let uri;
      if (server instanceof Ci.nsIMsgIncomingServer)
        uri = `${server.localStoreType}://${server.hostName}`;
      else if (server instanceof Ci.nsISmtpServer)
        uri = `smtp://${server.hostname}`;
      else
        throw new Error(`Unsupported server type: ${server}`);

      const login = Cc['@mozilla.org/login-manager/loginInfo;1'].createInstance(Ci.nsILoginInfo);
      login.init(uri, null, uri, server.username, password, '', '');
      try {
        Services.logins.addLogin(login);
      }
      catch(error) {
        if (error.message.includes('This login already exists')) {
          // TODO modify
        } else {
          throw e;
        }
      }
    };

    try {
      Services.console.logStringMessage('start account creation for '+userName);
      const UUIDGen = Cc['@mozilla.org/uuid-generator;1'].getService(Ci.nsIUUIDGenerator);

      const inServer = MailServices.accounts.createIncomingServer(
        fullUserName,
        MAIL_ACCOUNT_TEMPLATE.incomingServer.hostname,
        MAIL_ACCOUNT_TEMPLATE.incomingServer.type
      );
      Services.console.logStringMessage('incoming server created');
      for (const [key, value] of Object.entries(MAIL_ACCOUNT_TEMPLATE.incomingServer)) {
        Services.console.logStringMessage(`  ${key} = ${value}`);
        try {
          if (/^([^:]+):([^:]+)$/.test(key)) {
            const type = RegExp.$1;
            const name = RegExp.$2;
            switch (type) {
              case 'bool':
                inServer.setBoolValue(name, value);
                break;
              case 'int':
                inServer.setIntValue(name, value);
                break;
            }
            continue;
          }
          if (key in inServer && inServer[key] != value) {
            Services.console.logStringMessage(`    current value: ${inServer[key]}`);
            inServer[key] = value;
          }
        }
        catch(error) {
          Services.console.logStringMessage(`  => failed to set: ${String(error)}\n${error.stack}`);
        }
      }
      inServer.clientid = UUIDGen.generateUUID().toString().replace(/[{}]/g, '');
      inServer.prettyName = MAIL_ACCOUNT_TEMPLATE.incomingServer.prettyName ? MAIL_ACCOUNT_TEMPLATE.incomingServer.prettyName.replace(/%S/gi, userName) : userName;
      if (MAIL_ACCOUNT_TEMPLATE.rememberPassword &&
          password)
        rememberPassword(inServer, password);
      if (inServer.authMethod == Ci.nsMsgAuthMethod.OAuth2) {
        Services.prefs.setCharPref('oauth2.scope', MAIL_ACCOUNT_TEMPLATE.incomingServer.oauthSettings.scope);
        Services.prefs.setCharPref('oauth2.issuer', MAIL_ACCOUNT_TEMPLATE.incomingServer.oauthSettings.issuer);
      }
      inServer.valid = true;
      Services.console.logStringMessage('incoming server completed');

      let outServer;
      if (MAIL_ACCOUNT_TEMPLATE.outgoingServer) {
        outServer = MailServices.smtp.findServer(fullUserName, MAIL_ACCOUNT_TEMPLATE.outgoingServer.hostname);
        if (!outServer) {
          outServer = MailServices.smtp.createServer();
          outServer.hostname = MAIL_ACCOUNT_TEMPLATE.outgoingServer.hostname;
          outServer.port = MAIL_ACCOUNT_TEMPLATE.outgoingServer.port;
          outServer.authMethod = MAIL_ACCOUNT_TEMPLATE.outgoingServer.authMethod;
          if (outServer.clientidEnabled)
            outServer.clientid = newOutgoingClientid;
          if (outServer.authMethod > 1) {
            outServer.username = fullUserName;
            if (MAIL_ACCOUNT_TEMPLATE.rememberPassword &&
                password) {
              outServer.password = password;
              rememberPassword(outServer, password);
            }
          }
          Services.console.logStringMessage('outgoing server created');
        }
        if (outServer.authMethod == Ci.nsMsgAuthMethod.OAuth2) {
          const prefBranch = `mail.smtpserver.${outServer.key}.`;
          Services.prefs.setCharPref(`${prefBranch}oauth2.scope`, MAIL_ACCOUNT_TEMPLATE.outgoingServer.oauthSettings.scope);
          Services.prefs.setCharPref(`${prefBranch}oauth2.issuer`, MAIL_ACCOUNT_TEMPLATE.outgoingServer.oauthSettings.issuer);
        }
        outServer.socketType = MAIL_ACCOUNT_TEMPLATE.outgoingServer.socketType;
        outServer.description = MAIL_ACCOUNT_TEMPLATE.outgoingServer.description ? MAIL_ACCOUNT_TEMPLATE.outgoingServer.description.replace(/%S/gi, userName) : userName;
        //if (password)
        //  outServer.password = password;

        if (!MailServices.smtp.defaultServer || !MailServices.smtp.defaultServer.hostname)
          MailServices.smtp.defaultServer = outServer;

        Services.console.logStringMessage('outgoing server completed');
      }

      const identity = MailServices.accounts.createIdentity();
      Services.console.logStringMessage('identity created');
      for (const [key, value] of Object.entries(MAIL_ACCOUNT_TEMPLATE.identity)) {
        Services.console.logStringMessage(`  ${key} = ${value}`);
        if (key in identity && identity[key] != value) {
          Services.console.logStringMessage(`    current value: ${identity[key]}`);
          identity[key] = value;
        }
      }
      identity.fullName = MAIL_ACCOUNT_TEMPLATE.identity.fullName ? MAIL_ACCOUNT_TEMPLATE.identity.fullName.replace(/%S/gi, userName) : userName;
      identity.email = MAIL_ACCOUNT_TEMPLATE.identity.email ? MAIL_ACCOUNT_TEMPLATE.identity.email.replace(/%S/gi, userName) : `${userName}@${MAIL_ACCOUNT_TEMPLATE.incomingServer.hostname}`;
      identity.valid = true;
      if (outServer)
        identity.smtpServerKey = outServer.key;
      Services.console.logStringMessage('identity completed');

      const account = MailServices.accounts.createAccount();
      Services.console.logStringMessage('account created');
      account.addIdentity(identity);
      account.incomingServer = inServer;

      if (!MailServices.accounts.defaultAccount)
        MailServices.accounts.defaultAccount = account;

      let localMailServer;
      try {
        localMailServer = MailServices.accounts.localFoldersServer;
      }
      catch(_error) {
        localMailServer = null;
      }
      try {
        if (!localMailServer) {
          MailServices.accounts.createLocalMailAccount();
          try {
            localMailServer = MailServices.accounts.localFoldersServer;
            Services.console.logStringMessage('local folder account created');
          }
          catch(_error) {
          }
        }
      }
      catch (_error) {
      }

      // set folders
      const baseURI = `${inServer.serverURI}/`;
      identity.draftFolder = `${baseURI}Drafts`;
      identity.stationeryFolder = `${baseURI}Templates`;
      identity.fccFolder = `${baseURI}Sent`;
      identity.fccFolderPickerMode = 0;
      identity.draftsFolderPickerMode = 0;
      identity.tmplFolderPickerMode = 0;
      Services.console.logStringMessage('folders configured');

      MailServices.accounts.saveAccountInfo();
      Services.prefs.savePrefFile(null);
      const mail3Pane = Services.wm.getMostRecentWindow('mail:3pane');
      if (mail3Pane) {
        // simulate updateMailPaneUI()
        for (const folderPaneElement of mail3Pane.document.querySelectorAll('#folderPaneBox, #folderpane_splitter')) {
          folderPaneElement.collapsed = false;
        }
      }
      inServer.rootFolder.getNewMessages(null, null);
      Services.console.logStringMessage('done');
    }
    catch(error) {
      Services.console.logStringMessage(`${String(error)}\n${error.stack}`);
    }
  }

  const handleWindow = (window) => {
    if (MAIL_ACCOUNT_TEMPLATE.overrideAccountCreationWizard) {
      if (!window.location.href.startsWith('chrome://messenger/content/accountcreation/emailWizard.xhtml'))
        return;
      tryCreateAccount(window.parent);
      window.setTimeout(() => window.close(), 0);
    }
    else {
      if (window.location.href.startsWith('chrome://messenger/content/messenger.xhtml')) {
        const references = window.document.querySelectorAll('#appmenu_newMailAccountMenuItem, #newMailAccountMenuItem');
        for (const reference of references) {
          const item = window.document.createXULElement(reference.localName);
          item.setAttribute('id', `createAccountWithTemplate_after_${reference.id}`);
          item.setAttribute('class', reference.className);
          item.setAttribute('label', `${MAIL_ACCOUNT_TEMPLATE.name}用のメールアカウント`);
          const onCommand = () => tryCreateAccount();
          item.addEventListener('command', onCommand);
          reference.parentNode.insertBefore(item, reference);
          window.addEventListener('unload', () => {
            item.removeEventListener('command', onCommand);
            item.parentNode.removeChild(item);
          }, { once: true });
        }
      }
      else if (window.location.href.startsWith('chrome://messenger/content/msgAccountCentral.xhtml')) {
        const originalButton = window.document.querySelector('#setupEmail');
        const originalDescription = window.document.querySelector('#setupEmail + .account-description');
        const style = window.document.createElement('style');
        style.innerText = `
          #createAccountWithTemplate_after_${originalButton.id}::before {
            background-image: url("chrome://messenger/skin/icons/message.svg");
          }
        `;
        window.document.head.appendChild(style);
        const description = window.document.createElement('div');
        description.appendChild(window.document.createElement('p')).innerText = `${MAIL_ACCOUNT_TEMPLATE.name}用のメールアカウントを設定します。`
        description.setAttribute('class', originalDescription.className);
        originalDescription.parentNode.insertBefore(description, originalDescription.nextSibling);
        const button = window.document.createElement('button');
        button.setAttribute('id', `createAccountWithTemplate_after_${originalButton.id}`);
        button.setAttribute('class', originalButton.className);
        button.setAttribute('type', 'button');
        button.textContent = `${MAIL_ACCOUNT_TEMPLATE.name}用のメール`;
        const onCommand = () => tryCreateAccount();
        button.addEventListener('click', onCommand);
        originalDescription.parentNode.insertBefore(button, originalDescription.nextSibling);
        window.addEventListener('unload', () => {
          button.removeEventListener('click', onCommand);
          button.parentNode.removeChild(button);
          description.parentNode.removeChild(description);
        }, { once: true });
      }
      else if (window.location.href.startsWith('about:accountsettings')) {
        const originalItem = window.document.querySelector('#accountActionsAddMailAccount');
        const item = window.document.createXULElement(originalItem.localName);
        item.setAttribute('id', `createAccountWithTemplate_after_${originalItem.id}`);
        item.setAttribute('label', `${MAIL_ACCOUNT_TEMPLATE.name}用のメールアカウントを追加...`);
        const onCommand = event => {
          tryCreateAccount();
          event.stopPropagation();
        };
        item.addEventListener('command', onCommand);
        originalItem.parentNode.insertBefore(item, originalItem.nextSibling);
        window.addEventListener('unload', () => {
          item.removeEventListener('command', onCommand);
          item.parentNode.removeChild(item);
        }, { once: true });
      }
    }
  };

  const windows = Services.wm.getEnumerator(null);
  while (windows.hasMoreElements()) {
    handleWindow(windows.getNext().QueryInterface(Ci.nsIDOMWindow));
  }

  Services.obs.addObserver({
    observe(subject, topic, data) {
      if (topic == 'chrome-document-global-created')
        subject.getInterface(Ci.nsIDOMWindow).addEventListener('DOMContentLoaded', event => {
          handleWindow(event.target.defaultView);
        }, { once: true });
    }
  }, 'chrome-document-global-created', false);

  //createAccount(getenv('username'));
}
